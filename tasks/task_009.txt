# Task ID: 9
# Title: Data Loading and State Management
# Status: pending
# Dependencies: 1, 3, 4, 5, 6, 7
# Priority: high
# Description: Implement data loading from JSON files and state management for the application.
# Details:
1. Create a data context for each content type (Work, Journal, Shop, Info)
2. Implement data loading from JSON files
3. Set up state management for the application
4. Create utility functions for data manipulation
5. Example implementation for Work context:
```jsx
const WorkContext = createContext();

const WorkProvider = ({ children }) => {
  const [workBodies, setWorkBodies] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  useEffect(() => {
    const loadWorkData = async () => {
      try {
        setLoading(true);
        // In production, this would load from the compiled JSON files
        const response = await fetch('/src/data/work/index.json');
        if (!response.ok) throw new Error('Failed to load work data');
        
        const indexData = await response.json();
        const bodiesPromises = indexData.map(async (bodyId) => {
          const bodyResponse = await fetch(`/src/data/work/${bodyId}.json`);
          if (!bodyResponse.ok) throw new Error(`Failed to load work body: ${bodyId}`);
          return bodyResponse.json();
        });
        
        const bodies = await Promise.all(bodiesPromises);
        setWorkBodies(bodies);
      } catch (err) {
        console.error('Error loading work data:', err);
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };
    
    loadWorkData();
  }, []);
  
  return (
    <WorkContext.Provider value={{ workBodies, loading, error }}>
      {children}
    </WorkContext.Provider>
  );
};
```
6. Create similar context providers for other content types
7. Wrap the application with these providers in the main App component

# Test Strategy:
1. Test data loading from JSON files
2. Verify error handling for failed data loading
3. Test state updates when data changes
4. Confirm that components receive the correct data through context
5. Test performance with larger data sets

# Subtasks:
## 1. Create Context Objects for Content Types [pending]
### Dependencies: None
### Description: Create React Context objects for each content type (Work, Journal, Shop, Info) using React.createContext()
### Details:
Use React.createContext() to create separate context objects for each content type with appropriate default values. Export these context objects from dedicated files to maintain clean code organization. Each context should have a meaningful default value that represents its empty state.

## 2. Implement Data Loading Functions [pending]
### Dependencies: None
### Description: Create utility functions to load data from JSON files for each content type
### Details:
Develop reusable functions that handle fetching data from JSON files, with proper error handling and loading states. These functions should use fetch API to retrieve index files and then load individual content files based on the index data. Implement retry logic and timeout handling for robust data loading.

## 3. Create Context Provider Components [pending]
### Dependencies: 9.1, 9.2
### Description: Implement provider components for each context that manage state and data loading
### Details:
Create provider components (WorkProvider, JournalProvider, etc.) that wrap the Context.Provider component. Each provider should use useState for local state management (data, loading, error states) and useEffect for data fetching. Follow the pattern shown in the example implementation, ensuring proper loading states and error handling.

## 4. Develop Data Manipulation Utilities [pending]
### Dependencies: 9.2
### Description: Create utility functions for filtering, sorting, and transforming the loaded data
### Details:
Implement utility functions that can be used to manipulate the loaded data, such as filtering work items by category, sorting journal entries by date, or transforming raw data into the format needed by UI components. These utilities should be pure functions that don't modify the original data.

## 5. Integrate Context Providers in App Component [pending]
### Dependencies: 9.3
### Description: Wrap the main application with all context providers to make data available throughout the component tree
### Details:
Modify the main App component to wrap the application with all context providers in a nested structure. Ensure the providers are ordered correctly if there are dependencies between contexts. Implement a strategy to avoid unnecessary re-renders when multiple contexts change, such as using React.memo or optimizing the provider value with useMemo.

